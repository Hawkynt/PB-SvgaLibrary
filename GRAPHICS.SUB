' =============================================================================
' GRAPHICS.SUB - Core Graphics Drawing Functions
' =============================================================================
' Contains basic drawing primitives: lines, boxes, circles, pixels
' =============================================================================

' =============================================================================
' Draw a filled rectangle with border
' Parameters:
'   X1, Y1 - Top-left corner coordinates (BYVAL)
'   X2, Y2 - Bottom-right corner coordinates (BYVAL)
'   BorderColor - Border color (BYVAL)
'   FillColor - Fill color (BYVAL)
' Returns: Nothing
' =============================================================================
SUB Graphics_Bar (BYVAL x1 AS WORD, BYVAL y1 AS WORD, BYVAL x2 AS WORD, BYVAL y2 AS WORD, BYVAL borderColor AS BYTE, BYVAL fillColor AS BYTE)
    DIM TempX AS WORD, TempY AS WORD, ScanLine AS WORD
    
    ' Ensure coordinates are properly ordered
    IF y2 < y1 THEN SWAP y1, y2
    IF x2 < x1 THEN SWAP x1, x2
    
    IF VESASystemContext.CurrentMode = %SVGA_MODEX THEN
        ' Fill the interior using optimized Mode-X horizontal line drawing
        FOR ScanLine = y1 TO y2
            CALL ModeX_HLine(x1, x2, ScanLine, fillColor)
        NEXT ScanLine
        
        ' Draw the border using optimized Mode-X horizontal/vertical line drawing
        CALL ModeX_HLine(x1, x2, y1, borderColor)  ' Top
        CALL ModeX_HLine(x1, x2, y2, borderColor)  ' Bottom
        CALL ModeX_VLine(y1, y2, x1, borderColor)  ' Left
        CALL ModeX_VLine(y1, y2, x2, borderColor)  ' Right
		exit sub
	end if

    ' Fill the interior
    FOR ScanLine = y1 TO y2
        CALL Svga_LineDraw(x1, ScanLine, x2, ScanLine, fillColor)
    NEXT ScanLine
    
    ' Draw the border
    CALL Svga_LineDraw(x1, y1, x2, y1, borderColor)  ' Top
    CALL Svga_LineDraw(x1, y1, x1, y2, borderColor)  ' Left
    CALL Svga_LineDraw(x2, y2, x1, y2, borderColor)  ' Bottom
    CALL Svga_LineDraw(x2, y2, x2, y1, borderColor)  ' Right
END SUB

' =============================================================================
' Draw a 3D-style bar with depth effect
' Parameters:
'   X1, Y1 - Top-left corner coordinates (BYVAL)
'   X2, Y2 - Bottom-right corner coordinates (BYVAL)
'   Depth - 3D depth offset (BYVAL)
'   BorderColor - Border and 3D edge color (BYVAL)
'   FillColor - Fill color (BYVAL, 0 = no fill)
' Returns: Nothing
' =============================================================================
SUB Graphics_Bar3d (BYVAL x1 AS WORD, BYVAL y1 AS WORD, BYVAL x2 AS WORD, BYVAL y2 AS WORD, BYVAL depth AS WORD, BYVAL borderColor AS BYTE, BYVAL fillColor AS BYTE)
    DIM ScanLine AS WORD
    
    ' Ensure coordinates are properly ordered
    IF Y2 < Y1 THEN SWAP Y1, Y2
    IF X2 < X1 THEN SWAP X1, X2
    
    IF VESASystemContext.CurrentMode = %SVGA_MODEX THEN
        ' Fill the main face if fill color specified
        IF FillColor > 0 THEN
            FOR ScanLine = Y1 TO Y2
                CALL ModeX_HLine(X1, X2, ScanLine, FillColor)
            NEXT ScanLine
        END IF
        
        ' Draw main rectangle border
        CALL ModeX_HLine(X1, X2, Y1, BorderColor)  ' Top
        CALL ModeX_HLine(X1, X2, Y2, BorderColor)  ' Bottom
        CALL ModeX_VLine(Y1, Y2, X1, BorderColor)  ' Left
        CALL ModeX_VLine(Y1, Y2, X2, BorderColor)  ' Right
    ELSE
        ' Fill the main face if fill color specified
        IF FillColor > 0 THEN
            FOR ScanLine = Y1 TO Y2
                CALL LINEDRAW(X1, ScanLine, X2, ScanLine, FillColor)
            NEXT ScanLine
        END IF
        
        ' Draw main rectangle border
        CALL LINEDRAW(X1, Y1, X2, Y1, BorderColor)  ' Top
        CALL LINEDRAW(X1, Y1, X1, Y2, BorderColor)  ' Left
        CALL LINEDRAW(X2, Y2, X1, Y2, BorderColor)  ' Bottom
        CALL LINEDRAW(X2, Y2, X2, Y1, BorderColor)  ' Right
        
        ' Draw 3D depth lines
        CALL LINEDRAW(X1, Y1, X1 + Depth, Y1 - Depth, BorderColor)        ' Top-left to back
        CALL LINEDRAW(X2, Y1, X2 + Depth, Y1 - Depth, BorderColor)        ' Top-right to back
        CALL LINEDRAW(X1 + Depth, Y1 - Depth, X2 + Depth, Y1 - Depth, BorderColor)  ' Back top edge
        CALL LINEDRAW(X2, Y2, X2 + Depth, Y2 - Depth, BorderColor)        ' Bottom-right to back
        CALL LINEDRAW(X2 + Depth, Y1 - Depth, X2 + Depth, Y2 - Depth, BorderColor)  ' Back right edge
    END IF
END SUB

' =============================================================================
' Draw a filled box (wrapper for BAR with same border and fill color)
' Parameters:
'   X1, Y1 - Top-left corner coordinates (BYVAL)
'   X2, Y2 - Bottom-right corner coordinates (BYVAL)
'   Color - Color for both border and fill (BYVAL)
' Returns: Nothing
' =============================================================================
SUB Graphics_Box (BYVAL x1 AS WORD, BYVAL y1 AS WORD, BYVAL x2 AS WORD, BYVAL y2 AS WORD, BYVAL color AS BYTE)
    CALL BAR(X1, Y1, X2, Y2, Color, Color)
END SUB

' =============================================================================
' Draw a circle or ellipse (filled or outline)
' Parameters:
'   CenterX, CenterY - Center coordinates (BYVAL)
'   RadiusX, RadiusY - X and Y radius (BYVAL)
'   StartAngle - Starting angle in degrees (BYVAL)
'   EndAngle - Ending angle in degrees (BYVAL)
'   Color - Drawing color (BYVAL)
'   FillMode - 0=outline, 1=filled (BYVAL)
' Returns: Nothing
' =============================================================================
SUB Graphics_CircleDraw (BYVAL centerX AS WORD, BYVAL centerY AS WORD, BYVAL radiusX AS WORD, BYVAL radiusY AS WORD, BYVAL startAngle AS SINGLE, BYVAL endAngle AS SINGLE, BYVAL color AS BYTE, BYVAL fillMode AS BYTE)
    DIM PI AS SINGLE, StepSize AS SINGLE, Angle AS SINGLE
    DIM X AS WORD, Y AS WORD, OldX AS WORD, OldY AS WORD
    DIM FillY AS WORD, FillStartX AS WORD, FillEndX AS WORD
    
    PI = 4 * ATN(1)
    
    ' Calculate step size based on radius
    IF (RadiusX + RadiusY) / 2 = 0 THEN 
        StepSize = 1 
    ELSE 
        StepSize = 1 / ((RadiusX + RadiusY) / 64)
    END IF
    
    ' Adjust step direction for reverse drawing
    IF EndAngle < StartAngle THEN StepSize = -StepSize
    
    ' Calculate initial point
    X = INT(CenterX + RadiusX * COS(StartAngle * PI / 180))
    Y = INT(CenterY + RadiusY * SIN(StartAngle * PI / 180))
    
    IF FillMode = 0 THEN
        ' Draw outline only
        FOR Angle = StartAngle TO EndAngle STEP StepSize
            OldX = X
            OldY = Y
            X = INT(CenterX + RadiusX * COS(Angle * PI / 180))
            Y = INT(CenterY + RadiusY * SIN(Angle * PI / 180))
            CALL LINEDRAW(OldX, OldY, X, Y, Color)
        NEXT Angle
    ELSE
        ' Draw filled circle by drawing horizontal lines
        FOR FillY = CenterY - RadiusY TO CenterY + RadiusY
            ' Calculate X bounds for this Y coordinate
            IF ABS(FillY - CenterY) <= RadiusY THEN
                DIM YOffset AS SINGLE
                YOffset = (FillY - CenterY) / RadiusY
                IF ABS(YOffset) <= 1 THEN
                    DIM XOffset AS SINGLE
                    XOffset = SQR(1 - YOffset * YOffset) * RadiusX
                    FillStartX = CenterX - INT(XOffset)
                    FillEndX = CenterX + INT(XOffset)
                    CALL LINEDRAW(FillStartX, FillY, FillEndX, FillY, Color)
                END IF
            END IF
        NEXT FillY
    END IF
END SUB

' =============================================================================
' Draw a rectangle outline
' Parameters:
'   X1, Y1 - Top-left corner coordinates (BYVAL)
'   X2, Y2 - Bottom-right corner coordinates (BYVAL)
'   Color - Border color (BYVAL)
' Returns: Nothing
' =============================================================================
SUB Graphics_Frame (BYVAL x1 AS WORD, BYVAL y1 AS WORD, BYVAL x2 AS WORD, BYVAL y2 AS WORD, BYVAL color AS BYTE)
    ' Ensure coordinates are properly ordered
    IF Y2 < Y1 THEN SWAP Y1, Y2
    IF X2 < X1 THEN SWAP X1, X2
    
    ' Draw the four sides
    CALL LINEDRAW(X1, Y1, X2, Y1, Color)  ' Top
    CALL LINEDRAW(X1, Y1, X1, Y2, Color)  ' Left
    CALL LINEDRAW(X2, Y2, X1, Y2, Color)  ' Bottom
    CALL LINEDRAW(X2, Y2, X2, Y1, Color)  ' Right
END SUB

