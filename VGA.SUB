' =============================================================================
' VGA.SUB - Standard VGA Graphics Functions  
' =============================================================================
' Contains standard VGA mode (Mode 13h and others) graphics functions
' Optimized for direct linear memory access without banking
' =============================================================================

' =============================================================================
' VGA Drawing Primitives - Optimized for Mode 13h and direct VGA access
' =============================================================================

' =============================================================================
' Set pixel in standard VGA mode (Mode 13h)
' Parameters:
'   X, Y - Pixel coordinates (BYVAL)
'   Color - Pixel color value (BYVAL)
' Returns: Nothing
' Note: Optimized for Mode 13h 320x200x256 linear memory layout
' =============================================================================
SUB VGA_PutPixel(BYVAL X AS WORD, BYVAL Y AS WORD, BYVAL Color AS BYTE)
    ' Direct memory access for Mode 13h (linear 320x200)
    DEF SEG = &HA000
    POKE Y * 320 + X, Color
    DEF SEG
END SUB

' =============================================================================
' Get pixel from standard VGA mode
' Parameters:
'   X, Y - Pixel coordinates (BYVAL)
' Returns: Pixel color value
' =============================================================================
FUNCTION VGA_GetPixel(BYVAL X AS WORD, BYVAL Y AS WORD) AS BYTE
    DEF SEG = &HA000
    VGA_GetPixel = PEEK(Y * 320 + X)
    DEF SEG
END FUNCTION

' =============================================================================
' Draw horizontal line in VGA mode (highly optimized)
' Parameters:
'   X1, X2 - Start and end X coordinates (BYVAL)
'   Y - Y coordinate (BYVAL)
'   Color - Line color (BYVAL)
' Returns: Nothing
' Note: Uses fast assembly for maximum speed
' =============================================================================
SUB VGA_HLine(BYVAL X1 AS WORD, BYVAL X2 AS WORD, BYVAL Y AS WORD, BYVAL Color AS BYTE)
    DIM StartOffset AS WORD, LineLength AS WORD
    DIM ColorWord AS WORD, ColorDWord AS LONG
    
    ' Ensure X1 <= X2
    IF X1 > X2 THEN SWAP X1, X2
    
    StartOffset = Y * 320 + X1
    LineLength = X2 - X1 + 1
    
    ' Prepare color patterns for faster filling
    ColorWord = (Color * 256) + Color      ' AABBH pattern
    ColorDWord = (ColorWord * 65536&) + ColorWord  ' AABBAABBH pattern
    
    ' Ultra-optimized assembly using REP STOSW string instruction
    !PUSH ES
    !PUSH DI
    !MOV AX, &HA000
    !MOV ES, AX
    !MOV DI, StartOffset
    !MOV CX, LineLength
    !CLD                    ; Clear direction flag (forward)
    
    ' Handle odd starting pixel if not word-aligned
    !TEST DI, 1             ; Check if starting address is odd
    !JZ VGAHLineWordAlign   ; Jump if even (word-aligned)
    !MOV AL, Color
    !STOSB                  ; Store AL to ES:[DI], increment DI
    !DEC CX
    !JZ VGAHLineDone        ; Done if only one pixel
    
    VGAHLineWordAlign:
    ' Use REP STOSW for maximum speed (2 pixels at once)
    !MOV DX, CX
    !SHR CX, 1              ; Divide by 2 for word count
    !JZ VGAHLineRemainder   ; Jump if less than 2 pixels left
    !MOV AX, ColorWord      ; Load word pattern
    !REP STOSW              ; Ultra-fast: store AX to ES:[DI], repeat CX times
    
    VGAHLineRemainder:
    ' Handle remaining odd pixel
    !TEST DX, 1             ; Check if original length was odd
    !JZ VGAHLineDone        ; Jump if no remainder
    !MOV AL, Color
    !STOSB                  ; Store final pixel
    
    VGAHLineDone:
    !POP DI
    !POP ES
END SUB

' =============================================================================
' Draw vertical line in VGA mode (ultra-optimized)
' Parameters:
'   X - X coordinate (BYVAL)
'   Y1, Y2 - Start and end Y coordinates (BYVAL)
'   Color - Line color (BYVAL)
' Returns: Nothing
' Note: Uses direct memory calculation with no per-pixel overhead
' =============================================================================
SUB VGA_VLine(BYVAL X AS WORD, BYVAL Y1 AS WORD, BYVAL Y2 AS WORD, BYVAL Color AS BYTE)
    DIM StartOffset AS WORD, LineLength AS WORD
    
    ' Ensure Y1 <= Y2
    IF Y1 > Y2 THEN SWAP Y1, Y2
    
    StartOffset = Y1 * 320 + X
    LineLength = Y2 - Y1 + 1
    
    ' Ultra-optimized vertical line using assembly - no per-pixel calculations
    !PUSH ES
    !MOV AX, &HA000
    !MOV ES, AX
    !MOV BX, StartOffset      ; Starting memory address
    !MOV AL, Color           ; Pixel color
    !MOV DX, 320             ; Bytes per scanline (constant)
    !MOV CX, LineLength      ; Number of pixels to draw
    
    ' Optimized loop with minimal overhead
    VGAVLineOptimized:
    !MOV ES:[BX], AL         ; Set pixel
    !ADD BX, DX              ; Move to next scanline (320 bytes down)
    !LOOP VGAVLineOptimized  ; Decrement CX and loop if not zero
    
    !POP ES
END SUB

' =============================================================================
' Draw line between two points in VGA mode
' Parameters:
'   X1, Y1 - Starting point coordinates (BYVAL)
'   X2, Y2 - Ending point coordinates (BYVAL)
'   Color - Line color (BYVAL)
' Returns: Nothing
' Note: Uses optimized routines for horizontal/vertical lines
' =============================================================================
SUB VGA_LineDraw(BYVAL X1 AS WORD, BYVAL Y1 AS WORD, BYVAL X2 AS WORD, BYVAL Y2 AS WORD, BYVAL Color AS BYTE)
    ' Check for horizontal line
    IF Y1 = Y2 THEN
        CALL VGA_HLine(X1, X2, Y1, Color)
        EXIT SUB
    END IF
    
    ' Check for vertical line
    IF X1 = X2 THEN
        CALL VGA_VLine(X1, Y1, Y2, Color)
        EXIT SUB
    END IF
    
    ' Diagonal line - use Bresenham's algorithm
    DIM DeltaX AS INTEGER, DeltaY AS INTEGER, StepX AS INTEGER, StepY AS INTEGER
    DIM ErrorTerm AS INTEGER, CurrentX AS WORD, CurrentY AS WORD
    
    ' Calculate deltas and step directions
    DeltaX = ABS(X2 - X1)
    DeltaY = ABS(Y2 - Y1)
    
    IF X1 < X2 THEN StepX = 1 ELSE StepX = -1
    IF Y1 < Y2 THEN StepY = 1 ELSE StepY = -1
    
    ' Initialize error term
    ErrorTerm = DeltaX - DeltaY
    
    ' Set starting position
    CurrentX = X1
    CurrentY = Y1
    
    ' Draw line using Bresenham's algorithm
    DO
        CALL VGA_PutPixel(CurrentX, CurrentY, Color)
        
        ' Check if we've reached the end point
        IF CurrentX = X2 AND CurrentY = Y2 THEN EXIT DO
        
        ' Calculate next point
        DIM Error2 AS INTEGER
        Error2 = ErrorTerm * 2
        
        IF Error2 > -DeltaY THEN
            ErrorTerm = ErrorTerm - DeltaY
            CurrentX = CurrentX + StepX
        END IF
        
        IF Error2 < DeltaX THEN
            ErrorTerm = ErrorTerm + DeltaX
            CurrentY = CurrentY + StepY
        END IF
    LOOP
END SUB

' =============================================================================
' Draw filled rectangle in VGA mode
' Parameters:
'   X1, Y1 - Top-left corner (BYVAL)
'   X2, Y2 - Bottom-right corner (BYVAL)
'   Color - Fill color (BYVAL)
' Returns: Nothing
' Note: Uses optimized horizontal line fills
' =============================================================================
SUB VGA_FillRect(BYVAL X1 AS WORD, BYVAL Y1 AS WORD, BYVAL X2 AS WORD, BYVAL Y2 AS WORD, BYVAL Color AS BYTE)
    DIM ScanLine AS WORD
    
    ' Ensure coordinates are ordered
    IF X1 > X2 THEN SWAP X1, X2
    IF Y1 > Y2 THEN SWAP Y1, Y2
    
    ' Fill rectangle using horizontal lines
    FOR ScanLine = Y1 TO Y2
        CALL VGA_HLine(X1, X2, ScanLine, Color)
    NEXT ScanLine
END SUB

' =============================================================================
' Draw rectangle outline in VGA mode
' Parameters:
'   X1, Y1 - Top-left corner (BYVAL)
'   X2, Y2 - Bottom-right corner (BYVAL)
'   Color - Border color (BYVAL)
' Returns: Nothing
' =============================================================================
SUB VGA_DrawRect(BYVAL X1 AS WORD, BYVAL Y1 AS WORD, BYVAL X2 AS WORD, BYVAL Y2 AS WORD, BYVAL Color AS BYTE)
    ' Ensure coordinates are ordered
    IF X1 > X2 THEN SWAP X1, X2
    IF Y1 > Y2 THEN SWAP Y1, Y2
    
    ' Draw four sides
    CALL VGA_HLine(X1, X2, Y1, Color)  ' Top
    CALL VGA_HLine(X1, X2, Y2, Color)  ' Bottom
    CALL VGA_VLine(X1, Y1, Y2, Color)  ' Left
    CALL VGA_VLine(X2, Y1, Y2, Color)  ' Right
END SUB

' =============================================================================
' Draw circle in VGA mode using midpoint algorithm
' Parameters:
'   CenterX, CenterY - Center coordinates (BYVAL)
'   Radius - Circle radius (BYVAL)
'   Color - Circle color (BYVAL)
' Returns: Nothing
' Note: Standard midpoint circle algorithm
' =============================================================================
SUB VGA_DrawCircle(BYVAL CenterX AS WORD, BYVAL CenterY AS WORD, BYVAL Radius AS WORD, BYVAL Color AS BYTE)
    DIM X AS INTEGER, Y AS INTEGER, DecisionParam AS INTEGER
    
    X = 0
    Y = Radius
    DecisionParam = 1 - Radius
    
    ' Draw initial points
    CALL VGA_PutPixel(CenterX, CenterY + Radius, Color)
    CALL VGA_PutPixel(CenterX, CenterY - Radius, Color)
    CALL VGA_PutPixel(CenterX + Radius, CenterY, Color)
    CALL VGA_PutPixel(CenterX - Radius, CenterY, Color)
    
    ' Draw circle using midpoint algorithm
    DO WHILE X < Y
        X = X + 1
        
        IF DecisionParam < 0 THEN
            DecisionParam = DecisionParam + 2 * X + 1
        ELSE
            Y = Y - 1
            DecisionParam = DecisionParam + 2 * (X - Y) + 1
        END IF
        
        ' Draw 8 symmetric points
        CALL VGA_PutPixel(CenterX + X, CenterY + Y, Color)
        CALL VGA_PutPixel(CenterX - X, CenterY + Y, Color)
        CALL VGA_PutPixel(CenterX + X, CenterY - Y, Color)
        CALL VGA_PutPixel(CenterX - X, CenterY - Y, Color)
        CALL VGA_PutPixel(CenterX + Y, CenterY + X, Color)
        CALL VGA_PutPixel(CenterX - Y, CenterY + X, Color)
        CALL VGA_PutPixel(CenterX + Y, CenterY - X, Color)
        CALL VGA_PutPixel(CenterX - Y, CenterY - X, Color)
    LOOP
END SUB

' =============================================================================
' Draw filled circle in VGA mode
' Parameters:
'   CenterX, CenterY - Center coordinates (BYVAL)
'   Radius - Circle radius (BYVAL)
'   Color - Fill color (BYVAL)
' Returns: Nothing
' Note: Uses horizontal line fills for efficiency
' =============================================================================
SUB VGA_FillCircle(BYVAL CenterX AS WORD, BYVAL CenterY AS WORD, BYVAL Radius AS WORD, BYVAL Color AS BYTE)
    DIM X AS INTEGER, Y AS INTEGER, DecisionParam AS INTEGER
    DIM PrevY AS INTEGER
    
    X = 0
    Y = Radius
    DecisionParam = 1 - Radius
    PrevY = Y
    
    ' Draw initial horizontal line
    CALL VGA_HLine(CenterX - Radius, CenterX + Radius, CenterY, Color)
    
    ' Fill circle using horizontal lines
    DO WHILE X < Y
        X = X + 1
        
        IF DecisionParam < 0 THEN
            DecisionParam = DecisionParam + 2 * X + 1
        ELSE
            ' Y changed, draw horizontal lines for previous Y
            IF Y <> PrevY THEN
                CALL VGA_HLine(CenterX - X + 1, CenterX + X - 1, CenterY + PrevY, Color)
                CALL VGA_HLine(CenterX - X + 1, CenterX + X - 1, CenterY - PrevY, Color)
                PrevY = Y
            END IF
            
            Y = Y - 1
            DecisionParam = DecisionParam + 2 * (X - Y) + 1
        END IF
        
        ' Draw horizontal lines for current positions
        CALL VGA_HLine(CenterX - Y, CenterX + Y, CenterY + X, Color)
        CALL VGA_HLine(CenterX - Y, CenterX + Y, CenterY - X, Color)
    LOOP
    
    ' Draw final lines if Y changed
    IF Y <> PrevY THEN
        CALL VGA_HLine(CenterX - X, CenterX + X, CenterY + Y, Color)
        CALL VGA_HLine(CenterX - X, CenterX + X, CenterY - Y, Color)
    END IF
END SUB

' =============================================================================
' Clear VGA screen to specified color (Mode 13h)
' Parameters:
'   Color - Fill color (BYVAL)
' Returns: Nothing
' Note: Extremely fast for Mode 13h using assembly
' =============================================================================
SUB VGA_ClearScreen(BYVAL Color AS BYTE)
    DIM ColorWord AS WORD, ColorDWord AS LONG
    
    ' Prepare optimized color patterns
    ColorWord = (Color * 256) + Color      ' AABBH pattern
    ColorDWord = (ColorWord * 65536&) + ColorWord  ' AABBAABBH pattern
    
    ' Ultra-fast clear using REP STOSD string instruction (fastest possible)
    !PUSH ES
    !PUSH DI
    !MOV AX, &HA000
    !MOV ES, AX
    !XOR DI, DI             ; Start at offset 0
    !MOV CX, 16000          ; 64000 / 4 = 16000 DWORD writes
    !MOV EAX, ColorDWord    ; Load 4 pixels worth of color
    !CLD                    ; Clear direction flag (forward)
    !REP STOSD              ; Ultra-fast: store EAX to ES:[DI], repeat CX times
    !POP DI
    !POP ES
END SUB

' =============================================================================
' Fast block copy in VGA mode
' Parameters:
'   SrcX, SrcY - Source coordinates (BYVAL)
'   DestX, DestY - Destination coordinates (BYVAL)
'   Width, Height - Block dimensions (BYVAL)
' Returns: Nothing
' Note: Optimized for Mode 13h with overlap handling
' =============================================================================
SUB VGA_CopyBlock(BYVAL SrcX AS WORD, BYVAL SrcY AS WORD, BYVAL DestX AS WORD, BYVAL DestY AS WORD, BYVAL Width AS WORD, BYVAL Height AS WORD)
    DIM CurrentY AS WORD, SrcOffset AS WORD, DestOffset AS WORD
    DIM CopyDirection AS INTEGER
    
    ' Determine copy direction to handle overlapping regions
    IF SrcY < DestY OR (SrcY = DestY AND SrcX < DestX) THEN
        ' Copy backwards (bottom to top, right to left)
        CopyDirection = -1
        CurrentY = Height - 1
    ELSE
        ' Copy forwards (top to bottom, left to right)
        CopyDirection = 1
        CurrentY = 0
    END IF
    
    !PUSH ES
    !PUSH DS
    !MOV AX, &HA000
    !MOV ES, AX
    !MOV DS, AX
    
    IF CopyDirection = 1 THEN
        ' Forward copy
        DO WHILE CurrentY < Height
            SrcOffset = (SrcY + CurrentY) * 320 + SrcX
            DestOffset = (DestY + CurrentY) * 320 + DestX
            
            !MOV SI, SrcOffset
            !MOV DI, DestOffset
            !MOV CX, Width
            !CLD                    ; Clear direction flag (forward)
            
            ' 8086-compatible block move
            VGAForwardCopyLoop:
            !LODSB                  ; Load byte from DS:SI into AL, increment SI
            !STOSB                  ; Store AL to ES:DI, increment DI
            !LOOP VGAForwardCopyLoop
            
            CurrentY = CurrentY + 1
        LOOP
    ELSE
        ' Backward copy
        DO WHILE CurrentY >= 0
            SrcOffset = (SrcY + CurrentY) * 320 + SrcX + Width - 1
            DestOffset = (DestY + CurrentY) * 320 + DestX + Width - 1
            
            !MOV SI, SrcOffset
            !MOV DI, DestOffset
            !MOV CX, Width
            !STD                    ; Set direction flag (backward)
            
            ' 8086-compatible backward block move
            VGABackwardCopyLoop:
            !LODSB                  ; Load byte from DS:SI into AL, decrement SI
            !STOSB                  ; Store AL to ES:DI, decrement DI
            !LOOP VGABackwardCopyLoop
            
            CurrentY = CurrentY - 1
        LOOP
    END IF
    
    !CLD                        ; Restore forward direction
    !POP DS
    !POP ES
END SUB

' =============================================================================
' Fast pattern fill in VGA mode
' Parameters:
'   X1, Y1 - Top-left corner (BYVAL)
'   X2, Y2 - Bottom-right corner (BYVAL)
'   Pattern - 8-byte pattern (STRING)
' Returns: Nothing
' Note: Fills area with repeating 8-byte pattern
' =============================================================================
SUB VGA_PatternFill(BYVAL X1 AS WORD, BYVAL Y1 AS WORD, BYVAL X2 AS WORD, BYVAL Y2 AS WORD, Pattern AS STRING)
    DIM CurrentY AS WORD, CurrentX AS WORD, PatternIndex AS BYTE
    DIM LineOffset AS WORD
    
    ' Ensure coordinates are ordered
    IF X1 > X2 THEN SWAP X1, X2
    IF Y1 > Y2 THEN SWAP Y1, Y2
    
    ' Ensure pattern is at least 1 byte
    IF LEN(Pattern) = 0 THEN Pattern = CHR$(0)
    
    FOR CurrentY = Y1 TO Y2
        LineOffset = CurrentY * 320 + X1
        PatternIndex = 1
        
        !PUSH ES
        !MOV AX, &HA000
        !MOV ES, AX
        !MOV BX, LineOffset
        
        FOR CurrentX = X1 TO X2
            !MOV AL, ASC(MID$(Pattern, PatternIndex, 1))
            !MOV ES:[BX], AL
            !INC BX
            
            PatternIndex = PatternIndex + 1
            IF PatternIndex > LEN(Pattern) THEN PatternIndex = 1
        NEXT CurrentX
        
        !POP ES
    NEXT CurrentY
END SUB

' =============================================================================
' Get VGA mode information
' Parameters: None
' Returns: Nothing (updates global contexts)
' Note: Sets up contexts for Mode 13h
' =============================================================================
SUB VGA_InitMode13h
    ' Set Mode 13h context information
    SVGAScreenContext.XRes = 320
    SVGAScreenContext.YRes = 200
    SVGAScreenContext.ColorDepth = 8
    SVGAScreenContext.BytesPerLine = 320
    SVGAScreenContext.MemorySize = 64000
    SVGAScreenContext.WindowNumber = 0
    
    ' Update VESA context
    VESASystemContext.XRes = 320
    VESASystemContext.YRes = 200
    VESASystemContext.Window = 0
    VESASystemContext.Offset = 0
    VESASystemContext.XDecrease = 0
    VESASystemContext.YDecrease = 0
    VESASystemContext.CurrentMode = %SVGA_MODE13
    CALL InitDispatchTable  ' Update function pointers for Mode 13h
    
    ' Initialize scaling context
    ScaleSystemContext.XScale = 1
    ScaleSystemContext.YScale = 1
    ScaleSystemContext.KScale = 1
    ScaleSystemContext.XScaleMax = 320
    ScaleSystemContext.YScaleMax = 200
END SUB