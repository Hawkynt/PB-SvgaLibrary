' =============================================================================
' MEMORY.SUB - Memory Management Functions (EMS and VESA)
' =============================================================================
' Contains EMS memory allocation, VESA window management, and memory operations
' =============================================================================

' =============================================================================
' Allocate EMS (Expanded Memory) 
' Parameters:
'   SizeKB - Size in kilobytes to allocate (BYVAL)
'   Handle - Returns EMS handle (BYREF)
' Returns: Nothing (Handle returned by reference)
' Note: Modifies global EMSMemoryContext.Handle and SVGAScreenContext variables
' =============================================================================
SUB TAKEEMS(BYVAL SizeKB AS WORD, BYREF Handle AS WORD)
    ' EMS Interrupt 67h, Function 43h - Allocate Pages
    REG 1, &H4300
    REG 2, INT(SizeKB / 16) + 1  ' Convert KB to 16KB pages
    CALL INTERRUPT &H67
    Handle = REG(4)
    
    ' Get page frame address (Function 41h)
    REG 1, &H4100
    CALL INTERRUPT &H67
    EMSMemoryContext.Handle = Handle
    ' Note: PFRAME% global variable still needed for assembly routines
END SUB

' =============================================================================
' Access EMS memory byte
' Parameters:
'   Page - EMS page number (BYVAL)
'   Offset - Offset within page (BYVAL)
'   Value - Value to write, or -1 to read (BYVAL for write, BYREF for read result)
'   Handle - EMS handle (BYVAL)
' Returns: If Value = -1, returns byte value; otherwise writes Value
' Note: Uses assembly for direct memory access
' =============================================================================
SUB EMSBYTE(BYVAL Page AS WORD, BYVAL Offset AS WORD, BYREF Value AS INTEGER, BYVAL Handle AS WORD)
    DIM TempValue AS WORD, TempOffset AS WORD
    
    ' Switch to correct EMS page if different from current
    IF Handle = EMSMemoryContext.OldHandle THEN
        IF Page <> EMSMemoryContext.OldPage THEN
            ' Unmap old page
            REG 1, &H4800
            REG 4, EMSMemoryContext.OldHandle
            CALL INTERRUPT &H67
            
            ' Map new page (Function 44h)
            REG 1, &H4400
            REG 2, Page
            REG 4, Handle
            CALL INTERRUPT &H67
        END IF
    ELSE
        ' Different handle, unmap old and map new
        REG 1, &H4800
        REG 4, EMSMemoryContext.OldHandle
        CALL INTERRUPT &H67
        
        REG 1, &H4400
        REG 2, Page
        REG 4, Handle
        CALL INTERRUPT &H67
    END IF
    
    ' Update tracking variables
    EMSMemoryContext.OldPage = Page
    EMSMemoryContext.OldHandle = Handle
    
    TempValue = Value
    TempOffset = Offset
    
    IF Value = -1 THEN
        ' Read operation - assembly code to read byte
        !PUSH ES
        !MOV ES, PFRAME%
        !MOV BX, TempOffset
        !MOV AL, ES:[BX]
        !MOV AH, 0
        !MOV TempValue, AX
        !POP ES
        Value = TempValue
    ELSE
        ' Write operation - assembly code to write byte
        !PUSH ES
        !MOV ES, PFRAME%
        !MOV BX, TempOffset
        !MOV AX, TempValue
        !MOV ES:[BX], AL
        !POP ES
    END IF
END SUB

' =============================================================================
' Write string to EMS memory
' Parameters:
'   Segment - EMS segment (BYVAL)
'   Offset - Offset within segment (BYVAL)
'   Data - String to write (BYREF)
'   Handle - EMS handle (BYVAL)
' Returns: Nothing
' =============================================================================
SUB PUTEMSSTRING(BYVAL Segment AS WORD, BYVAL Offset AS WORD, BYVAL Data AS STRING, BYVAL Handle AS WORD)
    DIM Index AS WORD, CurrentByte AS INTEGER
    
    FOR Index = 1 TO LEN(Data)
        CurrentByte = ASC(MID$(Data, Index, 1))
        CALL EMSBYTE(Segment, Offset + Index - 1, CurrentByte, Handle)
    NEXT Index
END SUB

' =============================================================================
' Read string from EMS memory
' Parameters:
'   Segment - EMS segment (BYVAL)
'   Offset - Offset within segment (BYVAL)
'   Length - Number of bytes to read (BYVAL)
'   Handle - EMS handle (BYVAL)
' Returns: String data read from EMS
' =============================================================================
FUNCTION GETEMSSTRING$(BYVAL Segment AS WORD, BYVAL Offset AS WORD, BYVAL Length AS WORD, BYVAL Handle AS WORD)
    DIM Result AS STRING, Index AS WORD, CurrentByte AS INTEGER
    
    Result = ""
    FOR Index = 0 TO Length - 1
        CurrentByte = -1  ' Signal read operation
        CALL EMSBYTE(Segment, Offset + Index, CurrentByte, Handle)
        Result = Result + CHR$(CurrentByte)
    NEXT Index
    
    GETEMSSTRING$ = Result
END FUNCTION

' =============================================================================
' Release EMS memory handle
' Parameters:
'   Handle - EMS handle to release (BYVAL)
' Returns: Nothing
' =============================================================================
SUB CLOSEEMS(BYVAL Handle AS WORD)
    ' EMS Function 45h - Release Handle
    REG 1, &H4500
    REG 4, Handle
    CALL INTERRUPT &H67
    
    ' Clear tracking if this was the current handle
    IF Handle = EMSMemoryContext.Handle THEN
        EMSMemoryContext.Handle = 0
        EMSMemoryContext.OldHandle = 0
        EMSMemoryContext.OldPage = 0
    END IF
END SUB

' =============================================================================
' Write byte to EMS memory
' Parameters:
'   Segment - EMS segment (BYVAL)
'   Offset - Offset within segment (BYVAL)
'   ByteValue - Byte value to write (BYVAL)
'   Handle - EMS handle (BYVAL)
' Returns: Nothing
' =============================================================================
SUB PUTEMSBYTE(BYVAL Segment AS WORD, BYVAL Offset AS WORD, BYVAL ByteValue AS BYTE, BYVAL Handle AS WORD)
    DIM TempValue AS INTEGER
    TempValue = ByteValue
    CALL EMSBYTE(Segment, Offset, TempValue, Handle)
END SUB

' =============================================================================
' Read byte from EMS memory
' Parameters:
'   Segment - EMS segment (BYVAL)
'   Offset - Offset within segment (BYVAL)
'   Handle - EMS handle (BYVAL)
' Returns: Byte value read from EMS
' =============================================================================
FUNCTION GETEMSBYTE(BYVAL Segment AS WORD, BYVAL Offset AS WORD, BYVAL Handle AS WORD) AS BYTE
    DIM TempValue AS INTEGER
    TempValue = -1  ' Signal read operation
    CALL EMSBYTE(Segment, Offset, TempValue, Handle)
    GETEMSBYTE = TempValue
END FUNCTION

' =============================================================================
' Set VESA window
' Parameters:
'   WindowNumber - VESA window number to set (BYVAL)
' Returns: Nothing
' Note: Updates global VESASystemContext.Window
' =============================================================================
SUB SETVESAWINDOW(BYVAL WindowNumber AS WORD)
    !MOV AX,&H4F05
    !XOR BX,BX
    !MOV BL,VESASystemContext.Window
    !MOV DX,WindowNumber
    !INT &H10
     
    VESASystemContext.Window = WindowNumber
END SUB

' =============================================================================
' Copy memory block between segments
' Parameters:
'   SourceSeg, SourceOff - Source segment and offset (BYVAL)
'   SourceSize - Source size (BYVAL)
'   DestSeg, DestOff - Destination segment and offset (BYVAL)
'   DestSize - Destination size (BYVAL)
'   ByteCount - Number of bytes to copy (BYVAL)
' Returns: Nothing
' Note: Uses assembly for efficient memory copying
' =============================================================================
SUB MEMCOPY(BYVAL SourceSeg AS WORD, BYVAL SourceOff AS WORD, BYVAL SourceSize AS WORD, BYVAL DestSeg AS WORD, BYVAL DestOff AS WORD, BYVAL DestSize AS WORD, BYVAL ByteCount AS WORD)
    ' Assembly memory copy routine
    !PUSH DS
    !PUSH ES
    !PUSH SI
    !PUSH DI
    !MOV AX, SourceSeg
    !MOV DS, AX
    !MOV SI, SourceOff
    !MOV AX, DestSeg
    !MOV ES, AX
    !MOV DI, DestOff
    !MOV CX, ByteCount
    !CLD
    !REP MOVSB
    !POP DI
    !POP SI
    !POP ES
    !POP DS
END SUB

' =============================================================================
' Swap memory blocks between segments
' Parameters:
'   Seg1, Off1 - First segment and offset (BYVAL)
'   Size1 - First block size (BYVAL)
'   Seg2, Off2 - Second segment and offset (BYVAL)
'   Size2 - Second block size (BYVAL)
'   ByteCount - Number of bytes to swap (BYVAL)
' Returns: Nothing
' =============================================================================
SUB MEMSWAP(BYVAL Seg1 AS WORD, BYVAL Off1 AS WORD, BYVAL Size1 AS WORD, BYVAL Seg2 AS WORD, BYVAL Off2 AS WORD, BYVAL Size2 AS WORD, BYVAL ByteCount AS WORD)
    DIM Index AS WORD, Temp1 AS BYTE, Temp2 AS BYTE
    
    ' Simple byte-by-byte swap (could be optimized with assembly)
    FOR Index = 0 TO ByteCount - 1
        ' Read bytes from both locations
        !PUSH DS
        !MOV AX, Seg1
        !MOV DS, AX
        !MOV BX, Off1
        !ADD BX, Index
        !MOV AL, [BX]
        !MOV Temp1, AL
        !MOV AX, Seg2
        !MOV DS, AX
        !MOV BX, Off2
        !ADD BX, Index
        !MOV AL, [BX]
        !MOV Temp2, AL
        !POP DS
        
        ' Write swapped bytes
        !PUSH DS
        !MOV AX, Seg1
        !MOV DS, AX
        !MOV BX, Off1
        !ADD BX, Index
        !MOV AL, Temp2
        !MOV [BX], AL
        !MOV AX, Seg2
        !MOV DS, AX
        !MOV BX, Off2
        !ADD BX, Index
        !MOV AL, Temp1
        !MOV [BX], AL
        !POP DS
    NEXT Index
END SUB